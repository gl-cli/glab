// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cli/internal/git (interfaces: GitInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=./git_interface_mock_for_test.go -package=git gitlab.com/gitlab-org/cli/internal/git GitInterface
//

// Package git is a generated GoMock package.
package git_mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGitInterface is a mock of GitInterface interface.
type MockGitInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGitInterfaceMockRecorder
}

// MockGitInterfaceMockRecorder is the mock recorder for MockGitInterface.
type MockGitInterfaceMockRecorder struct {
	mock *MockGitInterface
}

// NewMockGitInterface creates a new mock instance.
func NewMockGitInterface(ctrl *gomock.Controller) *MockGitInterface {
	mock := &MockGitInterface{ctrl: ctrl}
	mock.recorder = &MockGitInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitInterface) EXPECT() *MockGitInterfaceMockRecorder {
	return m.recorder
}

// CheckoutBranch mocks base method.
func (m *MockGitInterface) CheckoutBranch(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutBranch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckoutBranch indicates an expected call of CheckoutBranch.
func (mr *MockGitInterfaceMockRecorder) CheckoutBranch(arg0 any) *MockGitInterfaceCheckoutBranchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutBranch", reflect.TypeOf((*MockGitInterface)(nil).CheckoutBranch), arg0)
	return &MockGitInterfaceCheckoutBranchCall{Call: call}
}

// MockGitInterfaceCheckoutBranchCall wrap *gomock.Call
type MockGitInterfaceCheckoutBranchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitInterfaceCheckoutBranchCall) Return(arg0 error) *MockGitInterfaceCheckoutBranchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitInterfaceCheckoutBranchCall) Do(f func(string) error) *MockGitInterfaceCheckoutBranchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitInterfaceCheckoutBranchCall) DoAndReturn(f func(string) error) *MockGitInterfaceCheckoutBranchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CurrentBranch mocks base method.
func (m *MockGitInterface) CurrentBranch() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBranch")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentBranch indicates an expected call of CurrentBranch.
func (mr *MockGitInterfaceMockRecorder) CurrentBranch() *MockGitInterfaceCurrentBranchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBranch", reflect.TypeOf((*MockGitInterface)(nil).CurrentBranch))
	return &MockGitInterfaceCurrentBranchCall{Call: call}
}

// MockGitInterfaceCurrentBranchCall wrap *gomock.Call
type MockGitInterfaceCurrentBranchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitInterfaceCurrentBranchCall) Return(arg0 string, arg1 error) *MockGitInterfaceCurrentBranchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitInterfaceCurrentBranchCall) Do(f func() (string, error)) *MockGitInterfaceCurrentBranchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitInterfaceCurrentBranchCall) DoAndReturn(f func() (string, error)) *MockGitInterfaceCurrentBranchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteLocalBranch mocks base method.
func (m *MockGitInterface) DeleteLocalBranch(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocalBranch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLocalBranch indicates an expected call of DeleteLocalBranch.
func (mr *MockGitInterfaceMockRecorder) DeleteLocalBranch(arg0 any) *MockGitInterfaceDeleteLocalBranchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocalBranch", reflect.TypeOf((*MockGitInterface)(nil).DeleteLocalBranch), arg0)
	return &MockGitInterfaceDeleteLocalBranchCall{Call: call}
}

// MockGitInterfaceDeleteLocalBranchCall wrap *gomock.Call
type MockGitInterfaceDeleteLocalBranchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitInterfaceDeleteLocalBranchCall) Return(arg0 error) *MockGitInterfaceDeleteLocalBranchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitInterfaceDeleteLocalBranchCall) Do(f func(string) error) *MockGitInterfaceDeleteLocalBranchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitInterfaceDeleteLocalBranchCall) DoAndReturn(f func(string) error) *MockGitInterfaceDeleteLocalBranchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDefaultBranch mocks base method.
func (m *MockGitInterface) GetDefaultBranch(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultBranch", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultBranch indicates an expected call of GetDefaultBranch.
func (mr *MockGitInterfaceMockRecorder) GetDefaultBranch(arg0 any) *MockGitInterfaceGetDefaultBranchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultBranch", reflect.TypeOf((*MockGitInterface)(nil).GetDefaultBranch), arg0)
	return &MockGitInterfaceGetDefaultBranchCall{Call: call}
}

// MockGitInterfaceGetDefaultBranchCall wrap *gomock.Call
type MockGitInterfaceGetDefaultBranchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitInterfaceGetDefaultBranchCall) Return(arg0 string, arg1 error) *MockGitInterfaceGetDefaultBranchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitInterfaceGetDefaultBranchCall) Do(f func(string) (string, error)) *MockGitInterfaceGetDefaultBranchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitInterfaceGetDefaultBranchCall) DoAndReturn(f func(string) (string, error)) *MockGitInterfaceGetDefaultBranchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoteBranchExists mocks base method.
func (m *MockGitInterface) RemoteBranchExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteBranchExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoteBranchExists indicates an expected call of RemoteBranchExists.
func (mr *MockGitInterfaceMockRecorder) RemoteBranchExists(arg0 any) *MockGitInterfaceRemoteBranchExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteBranchExists", reflect.TypeOf((*MockGitInterface)(nil).RemoteBranchExists), arg0)
	return &MockGitInterfaceRemoteBranchExistsCall{Call: call}
}

// MockGitInterfaceRemoteBranchExistsCall wrap *gomock.Call
type MockGitInterfaceRemoteBranchExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitInterfaceRemoteBranchExistsCall) Return(arg0 bool, arg1 error) *MockGitInterfaceRemoteBranchExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitInterfaceRemoteBranchExistsCall) Do(f func(string) (bool, error)) *MockGitInterfaceRemoteBranchExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitInterfaceRemoteBranchExistsCall) DoAndReturn(f func(string) (bool, error)) *MockGitInterfaceRemoteBranchExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
