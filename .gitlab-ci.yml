variables:
  GO_VERSION: '1.25.1'
  GOLANGCI_LINT_VERSION: '2.4.0'
  GITLAB_ADVANCED_SAST_ENABLED: 'true'

.code-patterns: &code-patterns
  - ".gitlab/**/*"
  - "**/*.go"
  - "scripts/**/*"
  - "test/**/*"
  - ".gitignore"
  - ".gitlab-ci.yml"
  - ".golangci.yml"
  - "Dangerfile"
  - "Makefile"
  - "go.mod"
  - "go.sum"

.sign_windows_base:
  image: ${CI_REGISTRY}/gitlab-com/gl-infra/common-ci-tasks-images/code-signer:1.2.1
  extends: .google-oidc:auth
  rules:
    - if: $CI_COMMIT_TAG && $CI_SERVER_HOST == "gitlab.com" && ($CI_PROJECT_PATH == "gitlab-org/cli" || $CI_PROJECT_PATH == "gitlab-org/security/cli")
  stage: release
  artifacts:
    expire_in: "30 days"
  variables:
    GCLOUD_PROJECT: gitlab-ci-runners-signing
    SERVICE_ACCOUNT: gitlab-cli-signer@gitlab-ci-runners-signing.iam.gserviceaccount.com
    WI_POOL_PROVIDER: //iam.googleapis.com/projects/8522242139/locations/global/workloadIdentityPools/gitlab-pool-oidc-$CI_PROJECT_ID/providers/gitlab-jwt-$CI_PROJECT_ID

.use_signed_if_available: &use_signed_if_available
  - |
    if [ -d "signed/" ]; then
      echo "Using signed binaries"
      rm -rf bin/
      mv signed bin
      ls -al bin
    else
      echo "Using unsigned binaries"
    fi

# run the pipeline only on MRs, tags, and default branch
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

default:
  image: ${GITLAB_DEPENDENCY_PROXY}golang:${GO_VERSION}
  tags:
    # NOTE: largest linux-based hosted runner available in Free tier.
    # see https://docs.gitlab.com/ci/runners/hosted_runners/linux/#machine-types-available-for-linux---x86-64
    - 'saas-linux-medium-amd64'

stages:
  - documentation
  - test
  - release

include:
  # remove the `.latest` from the following templates after 16.0 GitLab release
  # the `.latest` indicates the "nightly" version of the job definition
  # when we remove the `.latest`, we'll be using the stable job definition
  # https://gitlab.com/gitlab-org/cli/-/merge_requests/1100#note_1186302003
  - template: Jobs/SAST.latest.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml
  - template: Jobs/Secret-Detection.latest.gitlab-ci.yml
  - component: ${CI_SERVER_FQDN}/gitlab-org/components/danger-review/danger-review@2.1.0
  - component: ${CI_SERVER_FQDN}/components/code-intelligence/golang-code-intel@v0.0.3
    inputs:
      golang_version: ${GO_VERSION}
  - project: "gitlab-com/gl-security/security-operations/infrastructure-security-public/oidc-modules"
    ref: 3.4.0
    file: templates/gcp_auth.yaml

# From: https://docs.gitlab.com/ci/caching/#cache-go-dependencies
.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
    GOLANGCI_LINT_CACHE: $CI_PROJECT_DIR/.golangci-lint
  before_script:
    - mkdir -p .go .golangci-lint
  cache:
    paths:
      - .go/pkg/mod/
      - .golangci-lint/

.documentation:
  stage: documentation
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

.test:
  stage: test
  rules:
    - changes: *code-patterns
      when: always

check_docs_update:
  extends: .documentation
  script:
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME && git checkout $CI_MERGE_REQUEST_TARGET_BRANCH_NAME && git checkout $CI_COMMIT_SHA
    - make gen-docs
    - |-
      git status
      if [[ $(git add -A --dry-run) ]]; then
        echo '✖ ERROR: Documentation changes detected!';
        git diff --color --ws-error-highlight=all
        echo '✖ These changes require a documentation update. To regenerate the docs, read https://gitlab.com/gitlab-org/cli/-/tree/main/docs#generating-the-docs.';
        exit 1;
      else
        echo '✔ No documentation updates detected.';
        exit 0;
      fi

check_docs_markdown:
  image: registry.gitlab.com/gitlab-org/technical-writing/docs-gitlab-com/lint-markdown:alpine-3.21-vale-3.11.2-markdownlint2-0.17.2-lychee-0.18.1
  extends: .documentation
  script:
    # Lint prose
    - vale --minAlertLevel error docs
    # Lint Markdown
    - markdownlint-cli2 'docs/**/*.md' *.md
    # Check links
    - lychee --offline --include-fragments docs/**/*.md *.md

check_go_generated_code:
  extends:
    - .go-cache
    - .test
  needs: []
  script:
    # Workaround config.yaml.lock file permissions
    - chmod 600 internal/config/config.yaml.lock
    - make generate
    - |
      echo "Checking git status"
      [ -z "$(git status --short)" ] || {
        echo "Error: Files should have been generated:";
        git status --short; echo "Diff:";
        git --no-pager diff HEAD;
        echo "Run \"make generate\" and try again";
        exit 1;
      }

lint_commit:
  stage: test
  image: ${GITLAB_DEPENDENCY_PROXY}node:22-slim
  script:
    - apt-get update && apt-get install -y git
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_COMMIT_SHA
    - cd scripts/commit-lint && npm ci
    - ./lint.sh
  rules:
    - if: '$CI_MERGE_REQUEST_IID && $CI_PROJECT_VISIBILITY == "public"' # lint.js script makes an API call without authentication
      when: always

lint:
  extends: .test
  image: ${GITLAB_DEPENDENCY_PROXY}golangci/golangci-lint:v$GOLANGCI_LINT_VERSION
  script:
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    # add `--issues-exit-code 0` to ignore linting issues
    - golangci-lint run --output.text.path=stdout --output.text.colors=false --output.text.print-issued-lines=false --output.code-climate.path=gl-code-quality-report.json

  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

run_tests:
  extends:
    - .go-cache
    - .test
  # We currently only test on the lastest versino of Go which we also build against.
  # If we need to introduce testing for future versions of compatibility reasons
  # uncomment the below lines and adjust the `GO_VERSION` to included versions to test.
  # parallel:
    # matrix:
      # - GO_VERSION: ["1.22.3"]
  variables:
    # NOTE: required for race detector
    CGO_ENABLED: '1'
  script:
    # `goreleaser` also uses GITLAB_TOKEN and so we need to distinguish between
    # the GITLAB_TOKEN_TEST with less privilege used for testing and the GITLAB_TOKEN_RELEASE token
    # GITLAB_TEST_HOST is the GitLab instance used for the integration tests
    - GITLAB_TOKEN_TEST=$GITLAB_TOKEN_TEST GITLAB_TEST_HOST=$GITLAB_TEST_HOST make test-race
  after_script:
    - echo -e "\e[0Ksection_start:`date +%s`:coverage[collapsed=true]\r\e[0KRunning coverage report"
    - make coverage
    - echo -e "\e[0Ksection_end:`date +%s`:coverage\r\e[0K"
  coverage: /^total:\t+\(statements\)\t+\d+\.\d+%$/
  artifacts:
    when: always
    reports:
      junit: coverage.xml
    access: 'developer'

.release:
  extends: .sign_windows_base
  tags:
    # NOTE: we really benefit from the capacities of this 2xlarge runner.
    # we only want to build from the canonical project so we don't really
    # need to bother about this being compatible with forks.
    - 'saas-linux-2xlarge-amd64'
  stage: release
  image: ${GITLAB_DEPENDENCY_PROXY}docker:stable
  services:
    - docker:dind
  variables:
    # Disable shallow cloning so that goreleaser can diff between tags to
    # generate a changelog.
    GIT_DEPTH: 0
  needs: [sign_windows_installer]
  dependencies: [sign_windows_installer]
  before_script:
    - !reference [.google-oidc:auth, before_script]
    - *use_signed_if_available
    # The OIDC module creates secrets in /var/run/secrets/gitlab, but this
    # mount is only available on the job container, not the docker:dind
    # service. Copy these files into the the project dir to ensure
    # all containers can access it.
    - cp -r /var/run/secrets/gitlab .gitlab-secrets
  after_script:
    - !reference [.google-oidc:auth, after_script]
    - rm -rf .gitlab-secrets

release_test:
  extends: .release
  stage: release
  rules:
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
      when: never
    - changes:
        - .goreleaser.yml
        - .gitlab-ci.yml
  script: |
    docker run --rm --privileged \
      -e APPSTORE_CONNECT_API_KEY_FILE=$APPSTORE_CONNECT_API_KEY_FILE \
      -e GCLOUD_PROJECT=$GCLOUD_PROJECT \
      -e GO_VERSION="$GO_VERSION" \
      -e GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS \
      -e HOST_PWD=$PWD \
      -v $PWD:/go/src/gitlab.com/gitlab-org/cli \
      -v /var/run/docker.sock:/var/run/docker.sock \
      -w /go/src/gitlab.com/gitlab-org/cli \
      goreleaser/goreleaser:nightly release --snapshot
  artifacts:
    name: goreleaser-artifacts
    paths:
      - dist/
    expire_in: 1 week
  needs:
    - job: windows_installer
      optional: false
    - job: sign_windows_installer
      optional: true

release:
  extends: .release
  rules:
    - if: $CI_COMMIT_TAG
  script: |
    docker run --rm --privileged \
      -e APPSTORE_CONNECT_API_KEY_FILE=$APPSTORE_CONNECT_API_KEY_FILE \
      -e GCLOUD_PROJECT=$GCLOUD_PROJECT \
      -e GO_VERSION="$GO_VERSION" \
      -e GITLAB_TOKEN=$GITLAB_TOKEN_RELEASE \
      -e GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS \
      -e HOST_PWD=$PWD \
      -v $PWD:/go/src/gitlab.com/gitlab-org/cli \
      -v /var/run/docker.sock:/var/run/docker.sock \
      -w /go/src/gitlab.com/gitlab-org/cli \
      --entrypoint "" \
      goreleaser/goreleaser:nightly \
      bash -c "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        docker login -u $DOCKER_IO_USER -p $DOCKER_IO_PASSWORD
        goreleaser release
      "

homebrew-release:
  image: ${GITLAB_DEPENDENCY_PROXY}homebrew/ubuntu22.04:latest
  stage: release
  needs: [release]
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - touch ~/.gitconfig
    - git config --global user.email "$GITHUB_EMAIL"
    - git config --global user.name "$GITHUB_NAME"
    - brew bump-formula-pr glab --no-browse --tag="$CI_COMMIT_TAG" --revision="$CI_COMMIT_SHA"

windows_installer:
  stage: release
  image:
    name: amake/innosetup
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - changes:
        - .goreleaser.yml
        - .gitlab-ci.yml
  before_script:
    - *use_signed_if_available
  script:
    - mv scripts/setup_windows.iss .
    - iscc "setup_windows.iss" -DVersion=${CI_COMMIT_TAG//v}
  artifacts:
    paths:
      - "bin/*"
    expire_in: "30 days"
  needs:
    - job: build_windows
      optional: false
    - job: sign_windows_glab
      optional: true

build_windows:
  stage: release
  needs: []
  extends: .go-cache
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - changes:
        - .goreleaser.yml
        - .gitlab-ci.yml
  script:
    - GOOS=windows GOARCH=amd64 make build
    - mv bin/glab bin/glab.exe
  artifacts:
    paths:
      - "bin/glab.exe"
    expire_in: "30 days"

sign_windows_glab:
  extends: .sign_windows_base
  needs:
    - build_windows
  script:
    - sign-windows-binaries --output-dir signed bin/glab.exe
  artifacts:
    paths:
      - "signed/glab.exe"

sign_windows_installer:
  extends: .sign_windows_base
  needs:
    - windows_installer
  script:
    - sign-windows-binaries --output-dir signed bin/glab_*Windows_x86_64_installer.exe
  artifacts:
    paths:
      - "signed/glab_*Windows_x86_64_installer.exe"

secret_detection:
  dependencies: [] # Don't download artifacts, especially `./public/`
